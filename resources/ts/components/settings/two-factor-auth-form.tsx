import { SharedData } from "@/types";
import { router, usePage } from "@inertiajs/react";
import { Button } from "@/components/ui/button";
import route from "ziggy-js";
import { Fragment, useEffect, useState } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import axios from "axios";

const schema = z.object({
  code: z.string().min(6, "The code must be at least 6 characters long"),
});

export default function TwoFactorAuthForm({
  status,
}: {
  status?: "two-factor-authentication-enabled" | null;
}) {
  const [loading, setLoading] = useState<boolean>(false);
  const [downloading, setDownloading] = useState<boolean>(false);
  const [qrCode, setQrCode] = useState<string | null>(null);
  const { auth } = usePage<SharedData>().props;
  const form = useForm({
    resolver: zodResolver(schema),
    defaultValues: {
      code: "",
    },
  });

  const handleEnableTwoFactor = () => {
    router.post(
      route("two-factor.enable"),
      {},
      {
        onStart: () => setLoading(true),
        onFinish: () => setLoading(false),
        onSuccess: () => {
          router.reload();
        },
        onError: (error) => {
          console.error("Error enabling two-factor authentication:", error);
          form.setError("code", {
            type: "manual",
            message:
              "Failed to enable two-factor authentication. Please try again.",
          });
        },
      }
    );
  };

  const handlCompleteTwoFactor = (data: z.infer<typeof schema>) => {
    router.post(
      route("two-factor.confirm"),
      { code: data.code },
      {
        onStart: () => setLoading(true),
        onFinish: () => setLoading(false),
        onError: (error) => {
          console.error("Error confirming two-factor authentication:", error);
          form.setError("code", {
            type: "manual",
            message: "Invalid code. Please try again.",
          });
        },
        onSuccess: () => {
          form.reset();
          router.reload();
        },
      }
    );
  };

  const handleDisableTwoFactor = () => {
    router.delete(route("two-factor.disable"), {
      onStart: () => setLoading(true),
      onFinish: () => setLoading(false),
      onSuccess: () => {
        router.reload();
      },
      onError: (error) => {
        console.error("Error disabling two-factor authentication:", error);
        form.setError("code", {
          type: "manual",
          message:
            "Failed to disable two-factor authentication. Please try again.",
        });
      },
    });
  };

  const handleDownloadRecoveryCodes = async () => {
    setDownloading(true);
    const respone = await axios.get(route("two-factor.recovery-codes"), {
      withCredentials: true,
      headers: {
        "content-type": "application/json",
      },
    });
    const codes = respone.data;
    const blob = new Blob([codes.join("\n")], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "recovery-codes.txt";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    setDownloading(false);
  };

  useEffect(() => {
    console.log("Status:", status);
    if (status === "two-factor-authentication-enabled") {
      axios
        .get(route("two-factor.qr-code"), {
          withCredentials: true,
          headers: {
            "content-type": "application/json",
          },
        })
        .then((response) => {
          setQrCode(response.data.svg);
        })
        .catch((error) => {
          console.error("Error fetching QR code:", error);
          setQrCode(null);
        });
    }
  }, [status]);

  return (
    <div className="flex flex-col gap-4">
      {!auth.user.two_factor_confirmed_at && (
        <div className="flex flex-col gap-2">
          {!qrCode && (
            <Fragment>
              <Button
                onClick={handleEnableTwoFactor}
                className="w-fit"
                disabled={loading}
              >
                {loading ? "Enabling..." : "Enable two-factor authentication"}
              </Button>
              <p className="text-sm text-muted-foreground">
                Two-factor authentication adds an extra layer of security to
                your account by requiring a verification code in addition to
                your password. This code is typically generated by an
                authentication app on your phone, such as Google Authenticator
                or Authy.
              </p>
            </Fragment>
          )}
          {qrCode && (
            <div className="flex flex-col gap-2">
              <p className="text-sm text-green-600">
                Two-factor authentication is enabled. Scan the QR code below
                with your authentication app to set it up.
              </p>
              <div
                className="bg-white p-4 rounded-md shadow-s w-fit"
                dangerouslySetInnerHTML={{ __html: qrCode }}
              />
              <Form {...form}>
                <form onSubmit={form.handleSubmit(handlCompleteTwoFactor)}>
                  <FormField
                    control={form.control}
                    name="code"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Verification Code</FormLabel>
                        <FormControl>
                          <Input
                            placeholder="Enter the code"
                            type="text"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <Button
                    type="submit"
                    className="w-fit mt-2"
                    disabled={loading}
                  >
                    {loading ? "Confirming..." : "Confirm"}
                  </Button>
                  <p className="text-sm text-muted-foreground mt-2">
                    Enter the verification code generated by your authentication
                    app to confirm two-factor authentication.
                  </p>
                </form>
              </Form>
            </div>
          )}
        </div>
      )}
      {auth.user.two_factor_confirmed_at && (
        <div className="flex flex-col gap-2">
          <p className="text-sm font-medium text-green-600">
            Two-factor authentication is enabled. You can disable it at any
            time.
          </p>
          <p className="text-sm text-muted-foreground">
            If you lose access to your authentication app, you may be locked out
            of your account. Make sure to save your backup codes in a safe
            place.
          </p>
          <div className="flex flex-col md:flex-row gap-2">
            <Button onClick={handleDownloadRecoveryCodes} disabled={downloading}>
              {downloading ? "Downloading..." : "Download recovery codes"}
            </Button>
            <Button
              onClick={handleDisableTwoFactor}
              variant="destructive"
              disabled={loading}
            >
              {loading ? "Disabling..." : "Disable two-factor authentication"}
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}
